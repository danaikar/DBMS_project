Δανάη Καραγεωργοπούλου  sdi2000067
Παναγιώτης Χατζημίχος   sdi2000211


HP_CreateFile():
Η συνάρτηση HP_CreateFile χρησιμοποιείται για τη δημιουργία και κατάλληλη 
αρχικοποίηση ενός άδειου αρχείου σωρού με όνομα που δινεται σαν ορισμα.
Υστερα, δεσμευει και αρχικοποιει ενα block το οποιο ειναι η επικεφαλιδα 
και εκει περιεχεται το ειδος του αρχειου το οποιο κωδικοποιειται με εναν
ακεραιο (στη συγκεκριμενη περιπτωση 0), το αναγνωριστικο του αρχειου και το ονομα.
Σε περίπτωση που εκτελεστεί επιτυχώς, επιστρέφεται 0,ενώ σε διαφορετική περίπτωση -1.



HP_OpenFile():
Η συνάρτηση HP_OpenFile ανοίγει το αρχείο που δημιουργηθηκε και διαβάζει από το  
πρώτο μπλοκ την πληροφορία που αφορά το αρχείο σωρού. Αν οντως το αρχειο ειναι  
αρχειο σωρου επιστρεφει δεικτη στο struct που βρισκεται η επικεφαλιδα.
Σε περίπτωση που συμβεί οποιοδήποτε σφάλμα, επιστρέφεται τιμή NULL.



HP_CloseFile():
Η συνάρτηση HP_CloseFile κλείνει το αρχείο που αφορα την πληροφορια που δοθηκε
ως ορισμα. Σε περίπτωση που εκτελεστεί επιτυχώς, επιστρέφεται 0, ενώ σε 
διαφορετική περίπτωση -1. 



HP_InsertEntry():
Η συνάρτηση HP_InsertEntry ανοιγει το αρχείο που αφορα την πληροφορια που
δοθηκε ως ορισμα και μετρα με την καταλληλη συναρτηση ποσα blocks περιεχει.
Αν ο αριθμος αυτος ειναι 1, δηλαδη το αρχειο εχει μονο επικεφαλιδα,
δημιουργει ενα καινουριο block. To ιδιο συμβαινει και αν το record δεν 
χωραει γιατι το block εχει γεμισει, οποτε πρεπει να δημιουργηθει ενα καινουριο.
Οταν συμβουν οι ελεγχοι αυτοι, πηγαινει στην  καταλληλη θεση, που ειναι 
σιγουρα μετα απο την επικεφαλίδα και αποθηκευει την εγγραφη. Σε περίπτωση που 
εκτελεστεί επιτυχώς, επιστρέφεταιο αριθμός του block στο οποίο έγινε η εισαγωγή, 
ενώ σε διαφορετική περίπτωση -1.



HP_GetAllEntries():
Η συνάρτηση HP_GetAllEntries ανοιγει το αρχείο που αφορα την πληροφορια που
δοθηκε ως ορισμα και μετρα με την καταλληλη συναρτηση ποσα blocks περιεχει.
Μετα κανει iterate τα blocks (εκτος του header) και κοιταει αν υπαρχει εγγραφη
με id ιδιο με αυτο που δοθηκε ως ορισμα. Στην περίπτωση αυτη εκτυπωνει την εγγραφη και
επιστρέφει το πλήθος των blocks που διαβάστηκαν, ενώ σε περίπτωση λάθους επιστρέφει -1.






---------------------------------------------------------------------------------------






HΤ_CreateFile():
Η συνάρτηση HΤ_CreateFile χρησιμοποιείται για τη δημιουργία και κατάλληλη 
αρχικοποίηση ενός άδειου αρχείου κατακερματισμού με όνομα που δινεται σαν ορισμα.
Υστερα, δεσμευει και αρχικοποιει ενα block το οποιο ειναι η επικεφαλιδα και 
εκει περιεχεται το ειδος του αρχειου το οποιο κωδικοποιειται με εναν ακεραιο 
(στη συγκεκριμενη περιπτωση 0), το αναγνωριστικο του αρχειου, το ονομα,
ο αριθμος των buckets(δινεται ως ορισμα) και ο αριθμος των
records ανα block.
Για τα buckets αρχικά δεν δεσμεύεται κανένα block. Τα buckets αναπαριστούνται ως list από blocks.
Ο πίνακας bucket_end, έχει για το κάθε bucket το τελευταίο block της λίστας και το κάθε block δείχνει
στο προηγούμενό του. Έτσι κατά την εισαγωγή χρειάζεται να ανοίξουμε μόνο ένα block και να μην κάνουμε
iterate όλη την λίστα. Στην αρχή είναι bucket_end[i] = -1 για κάθε i, που σημαίνει πως δεν έχει φτιαχτεί
κάποιο block για αυτό το bucket ακόμη (δηλαδή το bucket είναι άδειο).
Η συνάρτηση σε περίπτωση που εκτελεστεί επιτυχώς, επιστρέφεται 0, ενώ σε διαφορετική περίπτωση -1.



HΤ_OpenFile():
Η συνάρτηση HΤ_OpenFile ανοίγει το αρχείο που δημιουργηθηκε και διαβάζει από το πρώτο 
μπλοκ την πληροφορία που αφορά το αρχείο κατακερματισμού. Αν οντως το αρχειο ειναι αρχειο 
κατακερματισμού, επιστρεφει δεικτη στο struct που βρισκεται η επικεφαλιδα.
Σε περίπτωση που συμβεί οποιοδήποτε σφάλμα, επιστρέφεται τιμή NULL.



HΤ_CloseFile():
Η συνάρτηση HΤ_CloseFile κλείνει το αρχείο που αφορα την πληροφορια που δοθηκε
ως ορισμα. Σε περίπτωση που εκτελεστεί επιτυχώς, επιστρέφεται 0, ενώ σε 
διαφορετική περίπτωση -1. 



HΤ_InsertEntry():
Η συνάρτηση HΤ_InsertEntry ανοιγει το αρχείο που αφορα την πληροφορια που
δοθηκε ως ορισμα και βρισκει το bucket (έστω b) στο οποιο κανει hash το record.
Στη συνέχεια κοιτάμε στον πίνακα bucket_end[b] για να βρούμε το τελευταίο block του bucket.
Αν αυτό έχει γεμίσει ή αν το bucket είναι άδειο (δηλαδή δεν έχει κανένα block ακόμη), τότε
κάνουμε allocate ένα ακόμη block που γίνεται το τελευταίο στη λίστα. Βάζουμε εκεί το record
και αλλάζουμε το bucket end. Διαφορετικά απλώς προσθέτουμε το record στο τελευταίο block.
Σε περίπτωση που εκτελεστεί επιτυχώς, επιστρέφεται ο αριθμός του block στο οποίο έγινε η 
εισαγωγή, ενώ σε διαφορετική περίπτωση -1.



HΤ_GetAllEntries():
Η συνάρτηση HT_GetAllEntries ανοιγει το αρχείο που αφορα την πληροφορια που
δοθηκε ως ορισμα και βρισκει το bucket στο οποιο κανει hash το συγκεκριμενο value
που δοθηκε. Αφου βρει το bucket, πηγαινει στο τελευταιο του block και σειριακα
(προς τα πισω) στην λίστα των blocks του bucket ελεγχει αν υπαρχει record με το ζητουμενο value.
Στην περίπτωση αυτη εκτυπωνει την εγγραφη και επιστρέφει το πλήθος των blocks που 
διαβάστηκαν, ενώ σε περίπτωση λάθους επιστρέφει -1.






---------------------------------------------------------------------------------------



Ο τρόπος που χειρίζεται τα buckets και τα records η SHT είναι παρόμοιος με την HT,
ωστόσο δεν εισάγουμε records αλλα ενα struct entry {record name, block in HT}.


SHΤ_CreateFile():
Η συνάρτηση SHΤ_CreateFile χρησιμοποιείται για τη δημιουργία και κατάλληλη 
αρχικοποίηση ενός άδειου αρχείου κατακερματισμού με όνομα που δινεται σαν ορισμα.
Υστερα, δεσμευει και αρχικοποιει ενα block το οποιο ειναι η επικεφαλιδα και 
εκει περιεχεται το ειδος του αρχειου το οποιο κωδικοποιειται με εναν ακεραιο 
(στη συγκεκριμενη περιπτωση 2),το αναγνωριστικοτου ερχειου, το ονομα,
ο αριθμος των buckets(δινεται ως ορισμα) και ο αριθμος των records ανα block. 
Σε περίπτωση που εκτελεστεί επιτυχώς, επιστρέφεται 0,ενώ σε διαφορετική περίπτωση -1.



SHT_OpenSecondaryIndex():
Η συνάρτηση SHΤ_OpenFile ανοίγει το αρχείο που δημιουργηθηκε και διαβάζει από το πρώτο 
μπλοκ την πληροφορία που αφορά το  δευτερεύον ευρετήριο κατακερματισμού. Αν οντως το αρχειο 
ειναι δευτερεύον ευρετήριο κατακερματισμού, επιστρεφει δεικτη στο struct που βρισκεται η επικεφαλιδα.
Σε περίπτωση που συμβεί οποιοδήποτε σφάλμα, επιστρέφεται τιμή NULL.



SHT_CloseSecondaryIndex():
Η συνάρτηση SHΤ_CloseFile κλείνει το αρχείο που αφορα την πληροφορια που δοθηκε
ως ορισμα. Σε περίπτωση που εκτελεστεί επιτυχώς, επιστρέφεται 0, ενώ σε 
διαφορετική περίπτωση -1. 



SHΤ_InsertEntry():
Η συνάρτηση SHΤ_InsertEntry ανοιγει το αρχείο που αφορα την πληροφορια που
δοθηκε ως ορισμα και βρισκει το bucket (έστω b) στο οποιο κανει hash το record.
Το hash του string γίνεται με την συνάρτηση hash_string.
Στη συνέχεια κοιτάμε στον πίνακα bucket_end[b] για να βρούμε το τελευταίο block του bucket.
Αν αυτό έχει γεμίσει ή αν το bucket είναι άδειο (δηλαδή δεν έχει κανένα block ακόμη), τότε
κάνουμε allocate ένα ακόμη block που γίνεται το τελευταίο στη λίστα. Βάζουμε εκεί το record
και αλλάζουμε το bucket end. Διαφορετικά απλώς προσθέτουμε το record στο τελευταίο block.
Σε περίπτωση που εκτελεστεί επιτυχώς, επιστρέφεταιο αριθμός του block στο οποίο έγινε η 
εισαγωγή, ενώ σε διαφορετική περίπτωση -1.



SHΤ_GetAllEntries():
Η συνάρτηση SHT_GetAllEntries ανοιγει το αρχείο που αφορα την πληροφορια που
δοθηκε ως ορισμα και βρισκει το bucket στο οποιο κανει hash το συγκεκριμενο value
που δοθηκε. Αφου βρει το bucket, πηγαινει στο τελευταιο του block και σειριακα
(προς τα πισω) στη λίστα των blocks. Αν βρει entry με ισοδύναμο όνομα με αυτό που δώθηκε,
καλεί την συνάρτηση searchBlock που ανοίγει το HT αρχείο και ψάχνει στο block που δώθηκε
το συγκεκριμένο record. Εκτυπωνει τις εγγραφες αυτες και επιστρέφει το πλήθος των blocks  
που διαβάστηκαν, ενώ σε περίπτωση λάθους επιστρέφει -1.






---------------------------------------------------------------------------------------






stat_main.c:
Το αρχείο που είναι υπεύθυνο για την εκτύπωση των στατιστικών. Δημιουργεί ένα αρχείο HT και 
ένα αρχείο SHT, κάνει διαδοχικά inserts και στην συνέχεια καλεί την συνάρτηση int 
HashStatistics(char* filename). Η HashStatistics ανοίγει το αρχείο, κοιτάει στο 1ο block, ελέγχει 
αν είναι τύπου HT ή SHT και καλεί αναλόγως τις HT_HashStatistics, SHT_HashStatistics που βρίσκονται 
στα ht_table.h και sht_table.h αντίστοιχα.